#pragma once
//201ef99a-7fa0-444c-9399-19ba84f12a1a //UAC
//E1AF8308-5D1F-11C9-91A4-08002B14A0FA //EPMAPPER
#define BIND_TYPE 01
#define SEND_TYPE 00
#define RET_TYPE 03
#define MYTEST_ALPC_NAME L"\\RPC Control\\MyFirstRPC"
#define MYTEST_ALPC_PACKS_NUM 1
BYTE g_pTestBindDataToSend[0x48] = {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xF0, 0xAD, 0xBA, 0x88, 0x88, 0x88, 0x88,
    0x08, 0x68, 0xCF, 0x11, 0xB7, 0x3B, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAD, 0xBA, 0x0D, 0xF0, 0xAD, 0xBA, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0D, 0xF0, 0xAD, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xCF, 0x7A, 0xF4, 0x1E, 0x0D, 0xF0, 0xAD, 0xBA
};
BYTE g_pTestParamDataToSend[0x88] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x31, 0x32, 0x33, 0x34,
    0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x31, 0x00, 0x32, 0x00, 0x33, 0x00, 0x34, 0x00, 0x34, 0x00, 0x33, 0x00,
    0x32, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x43, 0x65, 0x87, 0x00, 0x00, 0x00, 0x00,
    0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12
};

PBYTE g_pTestAllAlpcPacks[] = { g_pTestParamDataToSend };

#define EXECUAC_ALPC_NAME L"\\RPC Control\\LRPC-50ddf8142f3561885f"

unsigned char g_pRunUACBindDataToSend[72] {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0xF0, 0xAD, 0xBA, 0x9A, 0xF9, 0x1E, 0x20,
    0xA0, 0x7F, 0x4C, 0x44, 0x93, 0x99, 0x19, 0xBA, 0x84, 0xF1, 0x2A, 0x1A, 0x01, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0D, 0xF0, 0xAD, 0xBA, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0D, 0xF0, 0xAD, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x46, 0x54, 0x24, 0x04, 0x0D, 0xF0, 0xAD, 0xBA
};


unsigned char g_pRunUACDataToSend[460] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x9A, 0xF9, 0x1E, 0x20, 0xA0, 0x7F, 0x4C, 0x44, 0x93, 0x99, 0x19, 0xBA, 0x84, 0xF1, 0x2A, 0x1A,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x6F, 0x00,
    0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00,
    0x6D, 0x00, 0x33, 0x00, 0x32, 0x00, 0x5C, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0x00,
    0x70, 0x00, 0x61, 0x00, 0x64, 0x00, 0x2E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x22, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00,
    0x6F, 0x00, 0x77, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x73, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00,
    0x65, 0x00, 0x6D, 0x00, 0x33, 0x00, 0x32, 0x00, 0x5C, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x74, 0x00,
    0x65, 0x00, 0x70, 0x00, 0x61, 0x00, 0x64, 0x00, 0x2E, 0x00, 0x65, 0x00, 0x78, 0x00, 0x65, 0x00,
    0x22, 0x00, 0x20, 0x00, 0x61, 0x00, 0x61, 0x00, 0x62, 0x00, 0x62, 0x00, 0x63, 0x00, 0x63, 0x00,
    0x2E, 0x00, 0x74, 0x00, 0x78, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x14, 0x04, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x44, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x64, 0x00, 0x61, 0x00, 0x74, 0x00, 0x61, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x53, 0x00,
    0x74, 0x00, 0x61, 0x00, 0x30, 0x00, 0x5C, 0x00, 0x44, 0x00, 0x65, 0x00, 0x66, 0x00, 0x61, 0x00,
    0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
};

BOOL DumpProcessMemory(DWORD dwPid, WCHAR* wcsFilePath, PVOID pMemBase, DWORD dwMemSize)
{
    BOOL bRet = FALSE;
    HANDLE hProc = 0;
    PVOID pBuffer = 0;
    SIZE_T dwHasRead = 0;
    HANDLE hFileHandle = INVALID_HANDLE_VALUE;
    DWORD dwHasWrite = 0;

    pBuffer = malloc(dwMemSize + 10);
    hProc = OpenProcess(PROCESS_VM_READ, 0, dwPid);
    if (!hProc) { goto _FUNC_END; }

    ReadProcessMemory(hProc, pMemBase, pBuffer, dwMemSize, &dwHasRead);
    if (dwHasRead != dwMemSize) { goto _FUNC_END; }

    hFileHandle = CreateFileW(wcsFilePath, GENERIC_ALL, 0, 0, CREATE_ALWAYS, 0, 0);
    if (hFileHandle == INVALID_HANDLE_VALUE)
    {
        goto _FUNC_END;
    }

    if (!WriteFile(hFileHandle, pBuffer, (DWORD)dwHasRead, &dwHasWrite, 0))
    {
        goto _FUNC_END;
    }


_FUNC_END:
    if (pBuffer)
    {
        free(pBuffer);
    }
    if (hProc)
    {
        CloseHandle(hProc);
    }
    if (INVALID_HANDLE_VALUE != hFileHandle)
    {
        CloseHandle(hFileHandle);
    }
    return bRet;
}
DWORD AlpcGetAttrOffset(PALPC_MESSAGE_ATTRIBUTES pAttr, ULONG ulAttr)
{
    PVOID pRet = 0;
    ULONG ulOffset = sizeof(ALPC_MESSAGE_ATTRIBUTES);
    if (pAttr->AllocatedAttributes & ALPC_MESSAGE_SECURITY_ATTRIBUTE)
    {
        if (ALPC_MESSAGE_SECURITY_ATTRIBUTE == ulAttr)
        {
            goto _FUNC_END;
        }
        ulOffset = ulOffset + sizeof(ALPC_SECURITY_ATTR);
    }
    if (pAttr->AllocatedAttributes & ALPC_MESSAGE_VIEW_ATTRIBUTE)
    {

        if (ALPC_MESSAGE_VIEW_ATTRIBUTE == ulAttr)
        {
            goto _FUNC_END;
        }
        ulOffset = ulOffset + sizeof(ALPC_DATA_VIEW_ATTR);
    }
    if (pAttr->AllocatedAttributes & ALPC_MESSAGE_CONTEXT_ATTRIBUTE)
    {

        if (ALPC_MESSAGE_CONTEXT_ATTRIBUTE == ulAttr)
        {
            goto _FUNC_END;
        }
        ulOffset = ulOffset + sizeof(ALPC_CONTEXT_ATTR);
    }
    if (pAttr->AllocatedAttributes & ALPC_MESSAGE_HANDLE_ATTRIBUTE)
    {
        if (ALPC_MESSAGE_HANDLE_ATTRIBUTE == ulAttr)
        {
            goto _FUNC_END;
        }
    }
_FUNC_END:

    return ulOffset;
}

PALPC_MESSAGE_ATTRIBUTES MakeRPCTestMsgAttr(ULONG ulAttr)
{
    SIZE_T ulMessageAttributeBufSize = AlpcGetHeaderSize(ulAttr);

    PALPC_MESSAGE_ATTRIBUTES pMsgAttrAlloc = (PALPC_MESSAGE_ATTRIBUTES)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, ulMessageAttributeBufSize);
    pMsgAttrAlloc->AllocatedAttributes = ulAttr;  //ulAttr;
    pMsgAttrAlloc->ValidAttributes = ALPC_MESSAGE_CONTEXT_ATTRIBUTE;

    return pMsgAttrAlloc;
}

void AppendDataToMsg(PPORT_MESSAGE pPortMsg, PVOID pData, DWORD dwDataLen)
{
    pPortMsg->u1.s1.DataLength = (CSHORT)dwDataLen;
    pPortMsg->u1.s1.TotalLength = (CSHORT)sizeof(PORT_MESSAGE) + (CSHORT)dwDataLen;

    PVOID pCopyTo = (PVOID)((CHAR*)pPortMsg + sizeof(PORT_MESSAGE));
    memcpy(pCopyTo, pData, dwDataLen);
}